//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming



export interface ProblemDetails {
    type: string;
    title: string;
    status: number;
    detail: string;
    instance: string;

    [key: string]: any;
}

export interface MoveModel {
    playerId: number;
    positions: Position[];
}

export interface Position {
    xPosition: number;
    yPosition: number;
}

export interface SpendTokenModel {
    playerId: number;
    token: Token;
    battleflowNumber: number;
}

export enum Token {
    Battleflow = 0,
    Redraw = 1,
    Defence = 2,
    Empower = 3,
    Animus = 4,
}

export interface AttackModel {
    target: Position;
    might: { [key: string]: number; };
    empowerTokensUsed: number;
    playerId: number;
}

export enum Might {
    White = <any>"White",
    Yellow = <any>"Yellow",
    Red = <any>"Red",
    Black = <any>"Black",
}

export interface RerollModel {
    attackId: number;
    mightCards: number[];
    rerollTokensUsed: number;
}

export interface GameStateModel {
    players: PlayerModel[];
    boss: BossModel;
    characterPerformingAction: CharacterType;
    attack: DisplayAttackModel;
}

export interface PlayerModel {
    id: number;
    name: string;
    class: Class;
    defence: number;
    maxAnimus: number;
    animusRegen: number;
    might: { [key: string]: number; };
    xPosition: number;
    yPosition: number;
    currentHealth: number;
    currentAnimus: number;
    tokens: { [key: string]: number; };
}

export enum Class {
    Warbear = <any>"Warbear",
    Exile = <any>"Exile",
    Cur = <any>"Cur",
    Priest = <any>"Priest",
    Harbinger = <any>"Harbinger",
    Blade = <any>"Blade",
    Witch = <any>"Witch",
    Ranger = <any>"Ranger",
    Warden = <any>"Warden",
    Huntress = <any>"Huntress",
    Penitent = <any>"Penitent",
    GroveMaiden = <any>"GroveMaiden",
}

export interface BossModel {
    id: number;
    number: number;
    name: string;
    health: { [key: string]: number; };
    defence: number;
    positions: BossPartPosition[];
    might: { [key: string]: number; };
    nextAction: string[];
    actionComponentIndex: number;
}

export interface BossPartPosition extends Position {
    direction: Direction;
    corner: Corner;
    bossPart: string;
}

export enum Direction {
    NorthWest = <any>"NorthWest",
    North = <any>"North",
    NorthEast = <any>"NorthEast",
    SouthEast = <any>"SouthEast",
    South = <any>"South",
    SouthWest = <any>"SouthWest",
}

export enum Corner {
    NorthWest = <any>"NorthWest",
    NorthEast = <any>"NorthEast",
    East = <any>"East",
    SouthEast = <any>"SouthEast",
    SouthWest = <any>"SouthWest",
    West = <any>"West",
}

export enum CharacterType {
    Player = <any>"Player",
    Boss = <any>"Boss",
    Minion = <any>"Minion",
}

export interface AttackResponseModel {
    attackId: number;
    cardsDrawn: MightCardModel[];
}

export interface DisplayAttackModel extends AttackResponseModel {
    attackerId: number;
    characterType: CharacterType;
}

export interface MightCardModel {
    id: number;
    value: number;
    type: Might;
    isCritical: boolean;
    isDrawnFromCritical: boolean;
}

export interface EncounterModel {
    encounterId: number;
    encounterNumber: number;
    freeCompanyName: string;
    dateStarted: Date;
}

export interface FreeCompanyModel {
    name: string;
    players: PlayerSummaryModel[];
}

export interface CreatePlayerModel {
    name: string;
    class: Class;
}

export interface PlayerSummaryModel extends CreatePlayerModel {
    id: number;
}

export interface CreateFreeCompanyModel {
    playerId: number;
    name: string;
}

export interface JoinFreeCompanyModel {
    playerId: number;
    code: string;
}